[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lerobot-instruction-synthesis"
version = "0.1.0"
description = "Automatically generate multi-level natural language instructions from robot trajectory data using LLMs"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Antreas Antoniou", email = "iam@antreas.io"},
]
maintainers = [
    {name = "Antreas Antoniou", email = "iam@antreas.io"},
]
keywords = [
    "robotics",
    "machine-learning",
    "natural-language-processing",
    "trajectory-analysis",
    "instruction-generation",
    "llm",
    "gemini",
    "lerobot",
    "human-robot-interaction",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Human Machine Interfaces",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "python-dotenv>=0.19.0",
    "rich>=13.0.0",
    "google-generativeai>=0.3.0",
    "jsonlines>=3.0.0",
    "fire>=0.5.0",
    "tqdm>=4.65.0",
    "datasets>=2.14.0",
    "accelerate>=0.20.0",
    "scikit-learn>=1.3.0",
    "python-dateutil>=2.8.0",
    "pandas>=2.0.0",
    "pyarrow>=12.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
    "gradio>=4.0.0",
    "lerobot>=0.1.0",
    "dotenv>=0.9.9",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "autoflake>=2.0.0",
]
vllm = [
    "vllm>=0.2.0",  # For GPU-accelerated inference
]
all = [
    "lerobot-instruction-synthesis[test,dev,vllm]",
]

[project.urls]
"Homepage" = "https://github.com/AntreasAntoniou/lerobot-instruction-synthesis"
"Bug Tracker" = "https://github.com/AntreasAntoniou/lerobot-instruction-synthesis/issues"
"Documentation" = "https://github.com/AntreasAntoniou/lerobot-instruction-synthesis/blob/main/README.md"
"Source Code" = "https://github.com/AntreasAntoniou/lerobot-instruction-synthesis"

[project.scripts]
lesynthesis = "lesynthesis.enrich_with_llm:main"
lesynthesis-server = "lesynthesis.enrich_with_llm_server:main"

[tool.setuptools]
packages = ["lesynthesis"]
include-package-data = true

[tool.setuptools.package-data]
lesynthesis = ["*.md"]

[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=lesynthesis",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=15",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
